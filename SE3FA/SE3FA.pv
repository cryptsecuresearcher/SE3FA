(*** Secure and Efficient Three-Factor Authentication Protocol ***)

(* Channel definition *)
(* Note that defining several channels makes the implementation more readable *)
free sh: channel [private]. (* private channel between the user and server *)
free ch: channel. (* a general public channel *)

(* Private Terms *)
free IDi : bitstring [private].
free PWi : bitstring [private].
free Bi : bitstring [private].
free Nr : bitstring [private].
free Xs : bitstring [private].
free SK : bitstring [private].
table t(bitstring). (* the server's private blockchain*)
table d(bitstring). 

(* Public Terms *)
const P : bitstring.
const SIDj : bitstring.

(* Functions or constructors *)
fun xor(bitstring, bitstring) : bitstring. (* its destructor is xor *)
fun h(bitstring) : bitstring.
fun con(bitstring, bitstring) : bitstring.
fun mul(bitstring, bitstring) : bitstring. 
fun Gen(bitstring): bitstring.
fun Rep(bitstring, bitstring): bitstring.

(* Destructors *)
equation forall m1 : bitstring, m2 : bitstring; xor (xor(m1, m2), m2) = m1.

(* queries *)
(* the following query indicates the security of established session key*) 
query attacker (SK).  
(* this query indicates the anonymity of user *)
noninterf IDi. 
(* this query indicates the resistance of protocol against the "offline password guessing attack" *)
weaksecret PWi. 
(* the following queries indicate the resistance of protocol against the "replay attack and impersonation attack" *)
query term1 : bitstring, term2 : bitstring, term3 : bitstring; inj-event (UserEnded(term1, term2, term3)) ==> inj-event (UserStarted(term1, term2, term3)). 
query term1 : bitstring, term2 : bitstring, term3 : bitstring, term4 : bitstring, term5 : bitstring; inj-event (UserServerEnded(term1, term2, term3, term4, term5)) ==> inj-event (UserServerStarted(term1, term2, term3, term4, term5)). 
query term1 : bitstring, term2 : bitstring, term3 : bitstring; inj-event (ServerUserEnded(term1, term2, term3)) ==> inj-event (ServerUserStarted(term1, term2, term3)). 

(* Events *)
event UserStarted(bitstring, bitstring, bitstring).
event UserEnded(bitstring, bitstring, bitstring).
event UserServerStarted(bitstring, bitstring, bitstring, bitstring, bitstring).
event UserServerEnded(bitstring, bitstring, bitstring, bitstring, bitstring).
event ServerUserStarted(bitstring, bitstring, bitstring).
event ServerUserEnded(bitstring, bitstring, bitstring).

let ProcessUser =
let (a: bitstring, b: bitstring) = Gen(Bi) in
let PWDi = h(con(con(IDi,PWi),a)) in
out (sh, (IDi,PWDi));
in (sh, (Zi : bitstring, ERDi : bitstring, B1 : bitstring, B2 : bitstring, Aui : bitstring));
let fi = h(xor(PWDi,Zi)) in
let Ei= xor(Zi, h(con(PWDi,a))) in
! (event UserStarted (IDi,PWi,Bi);
let a' = Rep (Bi,b) in
let PWDi' = h(con(con(IDi,PWi),a')) in
let Zi' = xor(Ei, h(con(PWDi',a'))) in
let fi' = h(xor(Zi',PWDi')) in
if fi = fi' then
event UserEnded (IDi,PWi,Bi);
new Nu : bitstring;
new T1 : bitstring;
let Xs' = xor(B2,h(con(PWDi',IDi))) in
let B3 = xor(ERDi,h(con(T1,Xs'))) in
let Gi = xor(Zi',PWDi') in
let V1 = mul(Nu,B1) in
let B4 = xor(Aui,h(con(V1,IDi))) in
let GIDi = xor(V1,h(con(con(IDi,T1),Xs'))) in
let M1 = h(con(con(Gi,T1),V1)) in
event UserServerStarted(GIDi,T1,M1,B3,B4);
out (ch, (GIDi,T1,M1,B3,B4));
in (ch, (uM2 : bitstring, uM3 : bitstring, uT2 : bitstring));
let SK_u = xor(uM2,h(con(con(Xs',V1),IDi))) in
let M3' = h(con(con(Gi,uT2),SK_u)) in
if uM3 = M3' then
event ServerUserEnded(uM2, uM3, uT2);
0).

let UserReg =
in (sh, (xIDi: bitstring,xPWDi: bitstring));
new Token : bitstring;
let Zi = xor(h(con(con(SIDj,Xs),xIDi)),xPWDi) in
let ERDi = xor(xIDi,h(xor(Nr,SIDj))) in
let B1 = mul(Nr,P) in
let B2 = xor(Xs,h(con(xPWDi,xIDi))) in
let Aui = xor(Token,h(con(SIDj,xIDi))) in
insert t((h(ERDi),Nr));
insert d(Token);
out (sh, (Zi, ERDi, B1, B2, Aui));
0.

let ProcessServer =
in (ch, (sGIDi : bitstring, sT1 : bitstring, sM1 : bitstring, sB3 : bitstring, sB4 : bitstring));
let ERDi = xor(sB3,h(con(sT1,Xs))) in
get t((=h(ERDi),Nr':bitstring)) in
let IDi'= xor(ERDi,h(con(Nr',SIDj))) in
let Gi = h(con(con(SIDj,Xs),IDi')) in
let V1 = xor(sGIDi,h(con(con(IDi',sT1),Xs))) in
let Aui = xor(sB4,h(con(V1,IDi'))) in
let Token = xor(Aui,h(con(SIDj,IDi'))) in
get d(=Token) in
let M1' = h(con(con(Gi,sT1),V1)) in
if sM1 = M1' then
event UserServerEnded(sGIDi,sT1,sM1,sB3,sB4);
new T2 : bitstring;
new Ns : bitstring;
let SK_s = h(con(con(con(V1,Ns),IDi),SIDj)) in
let M2 = xor(SK_s,h(con(con(Xs,V1),IDi'))) in
let M3 = h(con(con(Gi,T2),SK_s)) in
event ServerUserStarted(M2, M3, T2);
out (ch, (M2, M3, T2));
0.

process 
( (!ProcessUser) | (!UserReg) | (!ProcessServer) )