Linear part:
Completing equations...
Completed equations:
Convergent part:
xor(xor(m1,m2),m2) = m1
Completing equations...
Completed equations:
xor(xor(m1,m2),m2) = m1
Process 0 (that is, the initial process):
(
    {1}!
    {2}let (a: bitstring,b: bitstring) = Gen(Bi) in
    {3}let PWDi: bitstring = h(con(con(IDi,PWi),a)) in
    {4}out(sh, (IDi,PWDi));
    {5}in(sh, (Zi: bitstring,ERDi: bitstring,B1: bitstring,B2: bitstring,Aui: bitstring));
    {6}let fi: bitstring = h(xor(PWDi,Zi)) in
    {7}let Ei: bitstring = xor(Zi,h(con(PWDi,a))) in
    {8}!
    {9}event UserStarted(IDi,PWi,Bi);
    {10}let a': bitstring = Rep(Bi,b) in
    {11}let PWDi': bitstring = h(con(con(IDi,PWi),a')) in
    {12}let Zi': bitstring = xor(Ei,h(con(PWDi',a'))) in
    {13}let fi': bitstring = h(xor(Zi',PWDi')) in
    {14}if (fi = fi') then
    {15}event UserEnded(IDi,PWi,Bi);
    {16}new Nu: bitstring;
    {17}new T1: bitstring;
    {18}let Xs': bitstring = xor(B2,h(con(PWDi',IDi))) in
    {19}let B3: bitstring = xor(ERDi,h(con(T1,Xs'))) in
    {20}let Gi: bitstring = xor(Zi',PWDi') in
    {21}let V1: bitstring = mul(Nu,B1) in
    {22}let B4: bitstring = xor(Aui,h(con(V1,IDi))) in
    {23}let GIDi: bitstring = xor(V1,h(con(con(IDi,T1),Xs'))) in
    {24}let M1: bitstring = h(con(con(Gi,T1),V1)) in
    {25}event UserServerStarted(GIDi,T1,M1,B3,B4);
    {26}out(ch, (GIDi,T1,M1,B3,B4));
    {27}in(ch, (uM2: bitstring,uM3: bitstring,uT2: bitstring));
    {28}let SK_u: bitstring = xor(uM2,h(con(con(Xs',V1),IDi))) in
    {29}let M3': bitstring = h(con(con(Gi,uT2),SK_u)) in
    {30}if (uM3 = M3') then
    {31}event ServerUserEnded(uM2,uM3,uT2)
) | (
    {32}!
    {33}in(sh, (xIDi: bitstring,xPWDi: bitstring));
    {34}new Token: bitstring;
    {35}let Zi_1: bitstring = xor(h(con(con(SIDj,Xs),xIDi)),xPWDi) in
    {36}let ERDi_1: bitstring = xor(xIDi,h(xor(Nr,SIDj))) in
    {37}let B1_1: bitstring = mul(Nr,P) in
    {38}let B2_1: bitstring = xor(Xs,h(con(xPWDi,xIDi))) in
    {39}let Aui_1: bitstring = xor(Token,h(con(SIDj,xIDi))) in
    {40}insert t((h(ERDi_1),Nr));
    {41}insert d(Token);
    {42}out(sh, (Zi_1,ERDi_1,B1_1,B2_1,Aui_1))
) | (
    {43}!
    {44}in(ch, (sGIDi: bitstring,sT1: bitstring,sM1: bitstring,sB3: bitstring,sB4: bitstring));
    {45}let ERDi_2: bitstring = xor(sB3,h(con(sT1,Xs))) in
    {62}get t((=h(ERDi_2),Nr': bitstring)) in
    {46}let IDi': bitstring = xor(ERDi_2,h(con(Nr',SIDj))) in
    {47}let Gi_1: bitstring = h(con(con(SIDj,Xs),IDi')) in
    {48}let V1_1: bitstring = xor(sGIDi,h(con(con(IDi',sT1),Xs))) in
    {49}let Aui_2: bitstring = xor(sB4,h(con(V1_1,IDi))) in
    {50}let Token_1: bitstring = xor(Aui_2,h(con(SIDj,IDi'))) in
    {61}get d(=Token_1) in
    {51}let M1': bitstring = h(con(con(Gi_1,sT1),V1_1)) in
    {52}if (sM1 = M1') then
    {53}event UserServerEnded(sGIDi,sT1,sM1,sB3,sB4);
    {54}new T2: bitstring;
    {55}new Ns: bitstring;
    {56}let SK_s: bitstring = h(con(con(con(V1_1,Ns),IDi),SIDj)) in
    {57}let M2: bitstring = xor(SK_s,h(con(con(Xs,V1_1),IDi))) in
    {58}let M3: bitstring = h(con(con(Gi_1,T2),SK_s)) in
    {59}event ServerUserStarted(M2,M3,T2);
    {60}out(ch, (M2,M3,T2))
) | (
    {63}phase 1;
    {64}out(ch, (Xs,IDi,PWi,Bi,Nr))
)

--  Process 1 (that is, process 0, with let moved downwards):
(
    {1}!
    {2}let (a: bitstring,b: bitstring) = Gen(Bi) in
    {3}let PWDi: bitstring = h(con(con(IDi,PWi),a)) in
    {4}out(sh, (IDi,PWDi));
    {5}in(sh, (Zi: bitstring,ERDi: bitstring,B1: bitstring,B2: bitstring,Aui: bitstring));
    {8}!
    {9}event UserStarted(IDi,PWi,Bi);
    {10}let a': bitstring = Rep(Bi,b) in
    {11}let PWDi': bitstring = h(con(con(IDi,PWi),a')) in
    {7}let Ei: bitstring = xor(Zi,h(con(PWDi,a))) in
    {12}let Zi': bitstring = xor(Ei,h(con(PWDi',a'))) in
    {13}let fi': bitstring = h(xor(Zi',PWDi')) in
    {6}let fi: bitstring = h(xor(PWDi,Zi)) in
    {14}if (fi = fi') then
    {15}event UserEnded(IDi,PWi,Bi);
    {16}new Nu: bitstring;
    {17}new T1: bitstring;
    {21}let V1: bitstring = mul(Nu,B1) in
    {20}let Gi: bitstring = xor(Zi',PWDi') in
    {24}let M1: bitstring = h(con(con(Gi,T1),V1)) in
    {18}let Xs': bitstring = xor(B2,h(con(PWDi',IDi))) in
    {23}let GIDi: bitstring = xor(V1,h(con(con(IDi,T1),Xs'))) in
    {22}let B4: bitstring = xor(Aui,h(con(V1,IDi))) in
    {19}let B3: bitstring = xor(ERDi,h(con(T1,Xs'))) in
    {25}event UserServerStarted(GIDi,T1,M1,B3,B4);
    {26}out(ch, (GIDi,T1,M1,B3,B4));
    {27}in(ch, (uM2: bitstring,uM3: bitstring,uT2: bitstring));
    {28}let SK_u: bitstring = xor(uM2,h(con(con(Xs',V1),IDi))) in
    {29}let M3': bitstring = h(con(con(Gi,uT2),SK_u)) in
    {30}if (uM3 = M3') then
    {31}event ServerUserEnded(uM2,uM3,uT2)
) | (
    {32}!
    {33}in(sh, (xIDi: bitstring,xPWDi: bitstring));
    {34}new Token: bitstring;
    {36}let ERDi_1: bitstring = xor(xIDi,h(xor(Nr,SIDj))) in
    {40}insert t((h(ERDi_1),Nr));
    {41}insert d(Token);
    {39}let Aui_1: bitstring = xor(Token,h(con(SIDj,xIDi))) in
    {38}let B2_1: bitstring = xor(Xs,h(con(xPWDi,xIDi))) in
    {37}let B1_1: bitstring = mul(Nr,P) in
    {35}let Zi_1: bitstring = xor(h(con(con(SIDj,Xs),xIDi)),xPWDi) in
    {42}out(sh, (Zi_1,ERDi_1,B1_1,B2_1,Aui_1))
) | (
    {43}!
    {44}in(ch, (sGIDi: bitstring,sT1: bitstring,sM1: bitstring,sB3: bitstring,sB4: bitstring));
    {45}let ERDi_2: bitstring = xor(sB3,h(con(sT1,Xs))) in
    {62}get t((=h(ERDi_2),Nr': bitstring)) in
    {46}let IDi': bitstring = xor(ERDi_2,h(con(Nr',SIDj))) in
    {48}let V1_1: bitstring = xor(sGIDi,h(con(con(IDi',sT1),Xs))) in
    {49}let Aui_2: bitstring = xor(sB4,h(con(V1_1,IDi))) in
    {50}let Token_1: bitstring = xor(Aui_2,h(con(SIDj,IDi'))) in
    {61}get d(=Token_1) in
    {47}let Gi_1: bitstring = h(con(con(SIDj,Xs),IDi')) in
    {51}let M1': bitstring = h(con(con(Gi_1,sT1),V1_1)) in
    {52}if (sM1 = M1') then
    {53}event UserServerEnded(sGIDi,sT1,sM1,sB3,sB4);
    {54}new T2: bitstring;
    {55}new Ns: bitstring;
    {56}let SK_s: bitstring = h(con(con(con(V1_1,Ns),IDi),SIDj)) in
    {58}let M3: bitstring = h(con(con(Gi_1,T2),SK_s)) in
    {57}let M2: bitstring = xor(SK_s,h(con(con(Xs,V1_1),IDi))) in
    {59}event ServerUserStarted(M2,M3,T2);
    {60}out(ch, (M2,M3,T2))
) | (
    {63}phase 1;
    {64}out(ch, (Xs,IDi,PWi,Bi,Nr))
)

-- Query not attacker_p1(SK[]) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 199 rules (43 with conclusion selected). Queue: 36 rules.
400 rules inserted. Base: 393 rules (43 with conclusion selected). Queue: 11 rules.
Starting query not attacker_p1(SK[])
RESULT not attacker_p1(SK[]) is true.
-- Query inj-event(UserServerEnded(term1,term2,term3,term4,term5)) ==> inj-event(UserServerStarted(term1,term2,term3,term4,term5)) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 199 rules (43 with conclusion selected). Queue: 52 rules.
400 rules inserted. Base: 398 rules (43 with conclusion selected). Queue: 16 rules.
Starting query inj-event(UserServerEnded(term1,term2,term3,term4,term5)) ==> inj-event(UserServerStarted(term1,term2,term3,term4,term5))
RESULT inj-event(UserServerEnded(term1,term2,term3,term4,term5)) ==> inj-event(UserServerStarted(term1,term2,term3,term4,term5)) is true.

--------------------------------------------------------------
Verification summary:

Query not attacker_p1(SK[]) is true.

Query inj-event(UserServerEnded(term1,term2,term3,term4,term5)) ==> inj-event(UserServerStarted(term1,term2,term3,term4,term5)) is true.

--------------------------------------------------------------

